//package Ex1;
//
//        #1. 1 ~ 100까지의 정수에서 짝수를 모두 뽑아내시오.
//        #2. 1, 1, 3, 4, 5, 8, 12, 17, 25, 37, 54, ...
//        위의 수열에서 2의 배수를 찾아 모두 더하는 함수를 작성하시오.
//        범위는 50번째 항까지 계산하도록 한다.
//        #3. 1, 1, 3, 4, 5, 8, 12, 17, 25, 37, 54, ...
//        위와 같은 수열의 30번째 항을 구하는 프로그램을 작성하시오.
//        #4. 피보나치 수열의 n번째 항을 구하는 프로그램을 작성하시오.
//        #5. 1 ~10의 범위에서 3의 배수는 더한다.
//        3으로 나눠 나머지가 1인 숫자는 곱한다.
//        3으로 나눠 나머지가 2인 숫자는 뺀다.
//        각각을 연산하면 모두 더한 값을 계산하시오.
//        #6. 3 과 5 의 배수를 모두 출력하는 프로그램을 작성하시오.
//        중복 허용하지 않으며 범위는 1 ~ 100으로 잡는다.
//        #7. 두 개의 숫자를 입력 받도록 한다.
//        입력받아 두 숫자의 배수를 모두 더한다.
//        범위는 1 ~ 20 까지의 범위로 한정한다.
//        #8. 1 ~ 50 중에 3의 배수를 찾아 모든 값을 더한 결과를 출력하시오.
//        #9. 1 ~ 50 중에 2의 배수를 찾아서 출력하시오.
//        #10. ln(x)을 0 ~ 3까지 적분하는 프로그램을 작성해보시오.
//        #11. 이중 배열을 만들어보자!
//        2D 좌표에서 x, y 정보를 얻었고 - 작은 박스에는 2개의 데이터가 들어간다.
//        이 정보들을 기반으로 현재 위치에서 제일 가까운 점을 찾으려고 한다.
//        얻은 좌표들은 배터리를 충전할 수 있는 위치다.
//        해당 위치는 총 7개가 있다. - 작은 박스가 7개 있다.
//        이를 프로그래밍 해보자!
//        힌트 - sqrt(x) == 루트 x와 동일하며 math.h를 include해야 사용할 수 있음
//        int location[7][2];
//        #12. 3의 n승을 구하는 함수를 작성하시오.
//        n 값을 입력 받아 입력하면 결과가 출력되게 만든다
//        #13. 1, 3, 4, 7, 11, 18, 29, 47, 76, ... 형태로 숫자가 진행된다.
//        23번째 숫자는 무엇일까 ?
//        (프로그래밍 하시오)
//        #14. 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ... 형태로 숫자가 진행된다.
//        1 ~ 57번째까지의 수들로 홀수들의 합을 하고 짝수들의 합을 구한다.
//        홀수들의 합 - 짝수들의 합의 결과를 출력하시오.
//        (프로그래밍 하시오)
//        #15 변수의 정의를 기술하시오.
//        #16 사람은 이름과 나이를 가지고 있다.
//        클래스로 표현해보세요.
//        #17 학생은 이름과 나이와 전공을 가지고 있다.
//        이를 class 기반으로 표현해보시오.
//        #18 10 부터 1 까지 거꾸로 출력해보시오.
//        #19 33 ~ 77 까지의 숫자중 3 의 배수를 출력하시오.
//        #20 1 ~ 100 까지의 숫자중 사용자 입력을 받아 몇 의 배수를 출력할지 결정하도록 만든다.
//        클래스를 사용하여 만들어보세요.
//        #21 구구단을 만들어봅시다
//        #22 연봉이 2400, 2700, 3000, 3300, 3600 인 사람 5 명이 있다.
//        이들의 연봉 인상률은 각각 20%, 15% 10%, 5%, 3% 에 해당한다.
//        3 년후 이들의 연봉은 각각 얼마인지 출력해보시오.
//        DG Challenge 1)
//        임의의 난수를 컴퓨터가 생성한다.
//        사용자의 입력을 받아 스무고개 게임을 진행하시오.
//        입력한 값과 난수의 대소 비교를 진행해서 사용자에게 알려준다.
//        맞추면 승리, 20 번의 기회를 모두 소비하면 패배!
//        DG Challenge 2)
//        오늘 학습한 Insertion Sort 를 내림차순 하도록 변형해보자!
//        DG Challenge 3)
//        20 명 이상의 학생들이 함께 즐길 수 있는 사다리 게임을 구현하자!
//        학생들의 이름은 A, B, C 등등으로 지어도 무방하다.
//        #23 5 ~ 10 개의 배열을 할당하고 33 ~ 50 사이의 난수를 할당하라.
//        #24 주사위 게임을 만들어보자
//        컴퓨터가 주사위를 굴리고 사용자 입력으로 맞추면 승리 틀리면 실패
//        #25 카지노의 3 슬롯 머신을 구현해보도록 한다.
//        #26 100 부터 시작하여 1 까지의 숫자중 5 의 배수를 출력하시오.
//        #27 1 ~ 20 까지의 숫자중 2 의 배수를 추출하여 출력한다.
//        #28 5 번에서 추출한 2 의 배수들에 피보나치 수열을 값들을 동일한 개수만큼 더해서 출력한다.
//        #29 6 번에서 구한 값들을 모두 더한 값을 출력하시오.
//        #30 1 ~ 300 사이의 숫자를 출력한다.
//        for 문을 돌 때 3 ~ 10 사이의 임의의 난수의 배수를 출력하도록 한다.
//        ex) 임의의 난수가 4 가 걸림
//        1 2 3 은 출력되지 않고 4 가 출력
//        다음 난수가 7 이 걸림
//        5 6 은 출력되지 않고 7 이 출력
//        다음 난수는 다시 3 이 걸림
//        8 은 출력되지 않고 9 가 출력
//        #31 1 번을 클래스화 해보자
//        #32 2 번을 클래스화 해보자!
//        #33 6 개의 배열에 5 ~ 10 사이의 난수를 할당한다.
//        중복이 발생하지 않게 만든 이후에 오름차순으로 정렬한다.